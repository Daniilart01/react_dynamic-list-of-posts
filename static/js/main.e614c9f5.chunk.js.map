{"version":3,"sources":["utils/fetchClient.ts","context/PostsContext.tsx","api/PostsApi.tsx","components/PostItem.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","components/Main.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","defaultValue","users","setUsers","selectedUser","setSelectedUser","userError","setUserError","PostsContext","React","createContext","PostsProvider","children","useState","value","useMemo","useEffect","catch","Provider","PostItem","post","selectedPost","postButtonClickHandler","id","title","className","type","cn","onClick","PostsList","posts","setSelectedPost","useCallback","prevSelectedPost","map","Loader","NewCommentForm","postId","setComments","setError","name","email","setData","errors","setErrors","isLoading","setIsLoading","resetForm","onSubmit","event","comment","preventDefault","prevComments","finally","htmlFor","placeholder","onChange","prevData","target","onFocus","prevErrors","PostDetails","error","comments","isCommentFormOpen","setIsCommentFormOpen","deleteCommentClickHandler","commentId","commentsCopy","filter","length","href","UserSelector","onUserSelected","useContext","isOpen","setIsOpen","openStatus","role","user","selectUser","Main","setPosts","userId","classNames","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e614c9f5.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: <T>(url: string) => request<T>(url, 'DELETE'),\n};\n","import React, { useMemo, useEffect } from 'react';\nimport { User } from '../types/User';\nimport { getUsers } from '../api/PostsApi';\n\ntype PostsContextType = {\n  users: User[];\n  setUsers: React.Dispatch<React.SetStateAction<User[]>>;\n  selectedUser: User | null;\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>;\n  userError: boolean;\n  setUserError: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nconst defaultValue: PostsContextType = {\n  users: [],\n  setUsers: () => {},\n  selectedUser: null,\n  setSelectedUser: () => {},\n  userError: false,\n  setUserError: () => {},\n};\n\nexport const PostsContext = React.createContext<PostsContextType>(defaultValue);\n\nexport const PostsProvider: React.FC = ({ children }) => {\n  const [users, setUsers] = React.useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = React.useState<User | null>(null);\n  const [userError, setUserError] = React.useState(false);\n\n  const value = useMemo(() => ({\n    users,\n    setUsers,\n    selectedUser,\n    setSelectedUser,\n    userError,\n    setUserError,\n  }), [users, selectedUser, userError]);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => {\n        setUserError(true);\n      });\n  }, []);\n\n  return (\n    <PostsContext.Provider value={value}>\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = (): Promise<User[]> => {\n  return client.get('/users');\n};\n\nexport const getUserPosts = (userId: number): Promise<Post[]> => {\n  return client.get(`/posts?userId=${userId}`);\n};\n\nexport const getPostComments = (postId: number): Promise<Comment[]> => {\n  return client.get(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number): Promise<void> => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const createComment = (\n  comment: Omit<Comment, 'id'>,\n): Promise<Comment> => {\n  return client.post('/comments', comment);\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  post: Post;\n  selectedPost: Post | null;\n  postButtonClickHandler: (post: Post) => void;\n};\n\nexport const PostItem: React.FC<Props> = ({\n  post,\n  selectedPost,\n  postButtonClickHandler,\n}) => {\n  return (\n    <tr key={post.id} data-cy=\"Post\">\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={cn('button', 'is-link', {\n            'is-light': selectedPost?.id !== post.id,\n          })}\n          onClick={() => postButtonClickHandler(post)}\n        >\n          {selectedPost?.id !== post.id ? 'Open' : 'Close'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React, { useCallback } from 'react';\nimport { Post } from '../types/Post';\nimport { PostItem } from './PostItem';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const postButtonClickHandler = useCallback((post: Post) => {\n    setSelectedPost((prevSelectedPost) => {\n      if (prevSelectedPost?.id === post.id) {\n        return null;\n      }\n\n      return post;\n    });\n  }, [setSelectedPost]);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <PostItem\n              key={post.id}\n              post={post}\n              selectedPost={selectedPost}\n              postButtonClickHandler={postButtonClickHandler}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useCallback } from 'react';\nimport cn from 'classnames';\nimport { createComment } from '../api/PostsApi';\nimport { Comment, CommentData } from '../types/Comment';\n\ntype Props = {\n  postId: number;\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n  setError: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  setComments,\n  setError,\n}) => {\n  const [data, setData] = React.useState<CommentData>({\n    name: '',\n    email: '',\n    body: '',\n  });\n  const [errors, setErrors] = React.useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const resetForm = useCallback(() => {\n    setError(false);\n\n    setData({\n      name: '',\n      email: '',\n      body: '',\n    });\n    setErrors({\n      name: false,\n      email: false,\n      body: false,\n    });\n  }, [setError]);\n\n  const submitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setError(false);\n\n    if (!data.name || !data.email || !data.body) {\n      setErrors({\n        name: !data.name,\n        email: !data.email,\n        body: !data.body,\n      });\n\n      return;\n    }\n\n    setIsLoading(true);\n    createComment({ ...data, postId })\n      .then((comment) => {\n        setComments((prevComments) => [...prevComments, comment]);\n        resetForm();\n      })\n      .catch(() => setError(true))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={submitHandler}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            value={data.name}\n            onChange={(event) => setData((prevData) => (\n              { ...prevData, name: event.target.value }\n            ))}\n            onFocus={() => setErrors((prevErrors) => (\n              { ...prevErrors, name: false }\n            ))}\n            className={cn('input', { 'is-danger': errors.name })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            value={data.email}\n            className={cn('input', { 'is-danger': errors.email })}\n            onChange={(event) => setData((prevData) => (\n              { ...prevData, email: event.target.value }\n            ))}\n            onFocus={() => setErrors((prevErrors) => (\n              { ...prevErrors, email: false }\n            ))}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            value={data.body}\n            className={cn('input', 'comm-area', { 'is-danger': errors.body })}\n            onChange={(event) => setData((prevData) => (\n              { ...prevData, body: event.target.value }\n            ))}\n            onFocus={() => setErrors((prevErrors) => (\n              { ...prevErrors, body: false }\n            ))}\n          />\n        </div>\n\n        {errors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button',\n              'is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={resetForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { deleteComment, getPostComments } from '../api/PostsApi';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [error, setError] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [comments, setComments] = React.useState<Comment[]>([]);\n  const [isCommentFormOpen, setIsCommentFormOpen] = React.useState(false);\n\n  const deleteCommentClickHandler = (comment: Comment) => {\n    const commentsCopy = [...comments];\n\n    setComments((prevComments) => (\n      prevComments.filter(({ id }) => id !== comment.id)\n    ));\n\n    deleteComment(comment.id)\n      .catch(() => {\n        setComments(commentsCopy);\n        setError(true);\n      });\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    setError(false);\n\n    getPostComments(post.id)\n      .then(setComments)\n      .catch(() => {\n        setError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n\n    return () => {\n      setComments([]);\n      setIsCommentFormOpen(false);\n    };\n  }, [post.id]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {error && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(!error && !isLoading && !comments.length) && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!!comments.length && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => deleteCommentClickHandler(comment)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {(!isLoading && !isCommentFormOpen) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsCommentFormOpen(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isCommentFormOpen && (\n          <NewCommentForm\n            postId={post.id}\n            setError={setError}\n            setComments={setComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { PostsContext } from '../context/PostsContext';\nimport { User } from '../types/User';\n\ntype Props = {\n  onUserSelected: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({ onUserSelected }) => {\n  const {\n    users,\n    selectedUser,\n    setSelectedUser,\n  } = React.useContext(PostsContext);\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const selectUser = (user: User) => {\n    setSelectedUser(user);\n    setIsOpen(false);\n    onUserSelected(user);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsOpen(openStatus => !openStatus)}\n        >\n\n          <span>{selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map((user) => (\n              // eslint-disable-next-line jsx-a11y/anchor-is-valid\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={cn('dropdown-item', {\n                  'is-active': selectedUser?.id === user.id,\n                })}\n                onClick={() => selectUser(user)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { PostsList } from './PostsList';\nimport { PostDetails } from './PostDetails';\nimport { UserSelector } from './UserSelector';\nimport { Loader } from './Loader';\nimport { PostsContext } from '../context/PostsContext';\nimport { User } from '../types/User';\nimport { getUserPosts } from '../api/PostsApi';\nimport { Post } from '../types/Post';\n\nexport const Main: React.FC = () => {\n  const {\n    selectedUser,\n    userError,\n    setUserError,\n  } = React.useContext(PostsContext);\n  const [posts, setPosts] = React.useState<Post[]>([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [selectedPost, setSelectedPost] = React.useState<Post | null>(null);\n\n  const onUserSelected = (user: User) => {\n    setIsLoading(true);\n    setPosts([]);\n    setSelectedPost(null);\n    setUserError(false);\n\n    getUserPosts(user.id)\n      .then(setPosts)\n      .catch(() => {\n        setUserError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector onUserSelected={onUserSelected} />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {userError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {(!isLoading\n                  && selectedUser\n                  && !userError\n                  && !posts.length)\n                  && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )}\n\n                {!!posts.length && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails post={selectedPost} />}\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import React from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { PostsProvider } from './context/PostsContext';\nimport { Main } from './components/Main';\n\nexport const App: React.FC = () => {\n  return (\n    <PostsProvider>\n      <Main />\n    </PostsProvider>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}