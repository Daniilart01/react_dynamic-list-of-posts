{"version":3,"sources":["utils/fetchClient.ts","context/PostsContext.tsx","api/PostsApi.tsx","components/PostItem.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","components/Main.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","defaultValue","users","setUsers","selectedUser","setSelectedUser","userError","setUserError","PostsContext","React","createContext","PostsProvider","children","useState","value","useMemo","useEffect","catch","Provider","PostItem","post","selectedPost","postButtonClickHandler","id","title","className","type","cn","onClick","PostsList","posts","setSelectedPost","handleOpenPostDetails","useCallback","prevSelectedPost","map","Loader","emptyInputs","name","email","emptyErrors","NewCommentForm","postId","setComments","setError","setData","errors","setErrors","isLoading","setIsLoading","resetForm","onInputFocused","field","prevErrors","onInputChanged","prevData","trimStart","onSubmit","event","comment","preventDefault","prevComments","finally","htmlFor","placeholder","onChange","target","onFocus","PostDetails","error","comments","isCommentFormOpen","setIsCommentFormOpen","handleDeleteComment","commentId","commentsCopy","filter","length","href","UserSelector","onUserSelected","useContext","isOpen","setIsOpen","openStatus","role","user","handleUserSelect","Main","setPosts","noPostsMessageVisible","userId","classNames","App","ReactDOM","render","document","getElementById"],"mappings":"kQAAMA,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAMxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAS/B,OAPIC,IACFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAIbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIZ,GAAJ,OAAoBD,EAAWC,IADzBY,EAEL,SAAIZ,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAFlDU,EAIH,SAAIZ,GAAJ,OAAoBD,EAAWC,EAAK,W,OCrBxCa,EAAiC,CACrCC,MAAO,GACPC,SAAU,aACVC,aAAc,KACdC,gBAAiB,aACjBC,WAAW,EACXC,aAAc,cAGHC,EAAeC,IAAMC,cAAgCT,GAErDU,EAA0B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxC,EAA0BH,IAAMI,SAAiB,IAAjD,mBAAOX,EAAP,KAAcC,EAAd,KACA,EAAwCM,IAAMI,SAAsB,MAApE,mBAAOT,EAAP,KAAqBC,EAArB,KACA,EAAkCI,IAAMI,UAAS,GAAjD,mBAAOP,EAAP,KAAkBC,EAAlB,KAEMO,EAAQC,mBAAQ,iBAAO,CAC3Bb,QACAC,WACAC,eACAC,kBACAC,YACAC,kBACE,CAACL,EAAOE,EAAcE,IAU1B,OARAU,qBAAU,WChCHhB,EAAW,UDkCbJ,KAAKO,GACLc,OAAM,WACLV,GAAa,QAEhB,IAGD,cAACC,EAAaU,SAAd,CAAuBJ,MAAOA,EAA9B,SACGF,K,gBEtCMO,EAA4B,SAAC,GAInC,IAHLC,EAGI,EAHJA,KACAC,EAEI,EAFJA,aACAC,EACI,EADJA,uBAEA,OACE,qBAAkB,UAAQ,OAA1B,UACE,oBAAI,UAAQ,SAAZ,SAAsBF,EAAKG,KAE3B,oBAAI,UAAQ,YAAZ,SACGH,EAAKI,QAER,oBAAIC,UAAU,8BAAd,SACE,wBACEC,KAAK,SACL,UAAQ,aACRD,UAAWE,IAAG,SAAU,UAAW,CACjC,YAAwB,OAAZN,QAAY,IAAZA,OAAA,EAAAA,EAAcE,MAAOH,EAAKG,KAExCK,QAAS,kBAAMN,EAAuBF,IANxC,UAQe,OAAZC,QAAY,IAAZA,OAAA,EAAAA,EAAcE,MAAOH,EAAKG,GAAK,OAAS,cAftCH,EAAKG,KCNLM,EAA6B,SAAC,GAIpC,IAHLC,EAGI,EAHJA,MACAT,EAEI,EAFJA,aACAU,EACI,EADJA,gBAEMC,EAAwBC,uBAAY,SAACb,GACzCW,GAAgB,SAACG,GACf,OAAoB,OAAhBA,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBX,MAAOH,EAAKG,GACzB,KAGFH,OAER,CAACW,IAEJ,OACE,sBAAK,UAAQ,YAAb,UACE,mBAAGN,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGK,EAAMK,KAAI,SAAAf,GAAI,OACb,cAAC,EAAD,CAEEA,KAAMA,EACNC,aAAcA,EACdC,uBAAwBU,GAHnBZ,EAAKG,gB,OCvCXa,G,MAAS,kBACpB,qBAAKX,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wB,cCObY,EAA2B,CAC/BC,KAAM,GACNC,MAAO,GACP/C,KAAM,IAGFgD,EAAc,CAClBF,MAAM,EACNC,OAAO,EACP/C,MAAM,GAGKiD,EAAkC,SAAC,GAIzC,IAHLC,EAGI,EAHJA,OACAC,EAEI,EAFJA,YACAC,EACI,EADJA,SAEA,EAAwBnC,IAAMI,SAAsBwB,GAApD,mBAAO/C,EAAP,KAAauD,EAAb,KACA,EAA4BpC,IAAMI,SAAS2B,GAA3C,mBAAOM,EAAP,KAAeC,EAAf,KACA,EAAkCtC,IAAMI,UAAS,GAAjD,mBAAOmC,EAAP,KAAkBC,EAAlB,KAEMC,EAAYjB,uBAAY,WAC5BW,GAAS,GAETC,EAAQR,GACRU,EAAUP,KACT,CAACI,IA4BEO,EAAiBlB,uBAAY,SAACmB,GAClCL,GAAU,SAACM,GAAD,mBAAC,eACJA,GADG,kBACUD,GAAQ,SAE3B,IAEGE,EAAiBrB,uBAAY,SACjCmB,EACAtC,GAEA+B,GAAQ,SAACU,GAAD,mBAAC,eACFA,GADC,kBACUH,EAAQtC,EAAM0C,mBAE/B,IAEH,OACE,uBACE,UAAQ,iBACRC,SA5CiB,SAACC,GJlBK,IAC3BC,GIkBED,EAAME,iBACNhB,GAAS,GAEJtD,EAAKgD,MAAShD,EAAKiD,OAAUjD,EAAKE,OAUvCyD,GAAa,IJ/BfU,EIgCgB,2BAAKrE,GAAN,IAAYoD,WJ9BpB1C,EAAY,YAAa2D,II+B3B/D,MAAK,SAAC+D,GACLhB,GAAY,SAACkB,GAAD,4BAAsBA,GAAtB,CAAoCF,OAChDd,GAAQ,SAAAU,GAAQ,kCAAUA,GAAV,IAAoB/D,KAAM,WAE3CyB,OAAM,kBAAM2B,GAAS,MACrBkB,SAAQ,WACPb,GAAa,OAjBfF,EAAU,CACRT,MAAOhD,EAAKgD,KACZC,OAAQjD,EAAKiD,MACb/C,MAAOF,EAAKE,QAkChB,UAIE,sBAAKiC,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQsC,QAAQ,sBAAjC,yBAIA,sBAAKtC,UAAU,yCAAf,UACE,uBACEC,KAAK,OACLY,KAAK,OACLf,GAAG,sBACHyC,YAAY,eACZlD,MAAOxB,EAAKgD,KACZ2B,SAAU,SAACP,GAAD,OAAWJ,EAAe,OAAQI,EAAMQ,OAAOpD,QACzDqD,QAAS,kBAAMhB,EAAe,SAC9B1B,UAAWE,IAAG,QAAS,CAAE,YAAamB,EAAOR,SAG/C,sBAAMb,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGdqB,EAAOR,MACN,sBACEb,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBqB,EAAOR,MACN,mBAAGb,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQsC,QAAQ,uBAAjC,0BAIA,sBAAKtC,UAAU,yCAAf,UACE,uBACEC,KAAK,OACLY,KAAK,QACLf,GAAG,uBACHyC,YAAY,iBACZlD,MAAOxB,EAAKiD,MACZd,UAAWE,IAAG,QAAS,CAAE,YAAamB,EAAOP,QAC7C0B,SAAU,SAACP,GAAD,OAAWJ,EAAe,QAASI,EAAMQ,OAAOpD,QAC1DqD,QAAS,kBAAMhB,EAAe,YAGhC,sBAAM1B,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGdqB,EAAOP,OACN,sBACEd,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBqB,EAAOP,OACN,mBAAGd,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQsC,QAAQ,eAAjC,0BAIA,qBAAKtC,UAAU,UAAf,SACE,0BACEF,GAAG,eACHe,KAAK,OACL0B,YAAY,oBACZlD,MAAOxB,EAAKE,KACZiC,UAAWE,IAAG,QAAS,YAAa,CAAE,YAAamB,EAAOtD,OAC1DyE,SAAU,SAACP,GAAD,OAAWJ,EAAe,OAAQI,EAAMQ,OAAOpD,QACzDqD,QAAS,kBAAMhB,EAAe,aAIjCL,EAAOtD,MACN,mBAAGiC,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,aAAcqB,IALpB,mBAYF,qBAAKvB,UAAU,UAAf,SAEE,wBACEC,KAAK,QACLD,UAAU,0BACVG,QAASsB,EAHX,4BC9LGkB,EAA+B,SAAC,GAAc,IAAZhD,EAAW,EAAXA,KAC7C,EAA0BX,IAAMI,UAAS,GAAzC,mBAAOwD,EAAP,KAAczB,EAAd,KACA,EAAkCnC,IAAMI,UAAS,GAAjD,mBAAOmC,EAAP,KAAkBC,EAAlB,KACA,EAAgCxC,IAAMI,SAAoB,IAA1D,mBAAOyD,EAAP,KAAiB3B,EAAjB,KACA,EAAkDlC,IAAMI,UAAS,GAAjE,mBAAO0D,EAAP,KAA0BC,EAA1B,KAEMC,EAAsB,SAACd,GAC3B,ILD0Be,EKCpBC,EAAY,YAAOL,GAEzB3B,GAAY,SAACkB,GAAD,OACVA,EAAae,QAAO,qBAAGrD,KAAgBoC,EAAQpC,ULJvBmD,EKOZf,EAAQpC,GLNjBvB,EAAA,oBAA2B0E,KKO7BzD,OAAM,WACL0B,EAAYgC,GACZ/B,GAAS,OAuBf,OAnBA5B,qBAAU,WLlBmB,IAAC0B,EK+B5B,OAZAO,GAAa,GACbL,GAAS,ILpBmBF,EKsBZtB,EAAKG,GLrBhBvB,EAAA,2BAA+B0C,KKsBjC9C,KAAK+C,GACL1B,OAAM,WACL2B,GAAS,MAEVkB,SAAQ,WACPb,GAAa,MAGV,WACLN,EAAY,IACZ6B,GAAqB,MAEtB,CAACpD,EAAKG,KAGP,qBAAKE,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,oBACOL,EAAKG,GADZ,aACmBH,EAAKI,SAGxB,mBAAG,UAAQ,WAAX,SACGJ,EAAK5B,UAIV,sBAAKiC,UAAU,QAAf,UACGuB,GAAa,cAAC,EAAD,IAEbqB,GACC,qBAAK5C,UAAU,yBAAyB,UAAQ,gBAAhD,mCAKC4C,IAAUrB,IAAcsB,EAASO,QAClC,mBAAGpD,UAAU,aAAa,UAAQ,oBAAlC,+BAKC6C,EAASO,QACV,qCACE,mBAAGpD,UAAU,aAAb,uBAEC6C,EAASnC,KAAI,SAAAwB,GAAO,OACnB,0BAEElC,UAAU,mBACV,UAAQ,UAHV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBAAGqD,KAAI,iBAAYnB,EAAQpB,OAAS,UAAQ,gBAA5C,SACGoB,EAAQrB,OAEX,wBACE,UAAQ,gBACRZ,KAAK,SACLD,UAAU,kBACV,aAAW,SACXG,QAAS,kBAAM6C,EAAoBd,IALrC,8BAWF,qBAAKlC,UAAU,eAAe,UAAQ,cAAtC,SACGkC,EAAQnE,SApBNmE,EAAQpC,WA2BlByB,IAAcuB,GACf,wBACE,UAAQ,qBACR7C,KAAK,SACLD,UAAU,iBACVG,QAAS,kBAAM4C,GAAqB,IAJtC,gCAWHD,GACC,cAAC,EAAD,CACE7B,OAAQtB,EAAKG,GACbqB,SAAUA,EACVD,YAAaA,UCtHZoC,EAAgC,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAC9C,EAIIvE,IAAMwE,WAAWzE,GAHnBN,EADF,EACEA,MACAE,EAFF,EAEEA,aACAC,EAHF,EAGEA,gBAEF,EAA4BI,IAAMI,UAAS,GAA3C,mBAAOqE,EAAP,KAAeC,EAAf,KAQA,OACE,sBACE,UAAQ,eACR1D,UAAU,qBAFZ,UAIE,qBAAKA,UAAU,mBAAf,SACE,yBACEC,KAAK,SACLD,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdG,QAAS,kBAAMuD,GAAU,SAAAC,GAAU,OAAKA,MAL1C,UAQE,gCAAmB,OAAZhF,QAAY,IAAZA,OAAA,EAAAA,EAAckC,OAAQ,kBAE7B,sBAAMb,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKlDyD,GACC,qBAAKzD,UAAU,gBAAgBF,GAAG,gBAAgB8D,KAAK,OAAvD,SACE,qBAAK5D,UAAU,mBAAf,SACGvB,EAAMiC,KAAI,SAACmD,GAAD,OAET,aADA,CACA,KAEER,KAAI,gBAAWQ,EAAK/D,IACpBE,UAAWE,IAAG,gBAAiB,CAC7B,aAAyB,OAAZvB,QAAY,IAAZA,OAAA,EAAAA,EAAcmB,MAAO+D,EAAK/D,KAEzCK,QAAS,kBAvCE,SAAC0D,GACxBjF,EAAgBiF,GAChBH,GAAU,GACVH,EAAeM,GAoCYC,CAAiBD,IANlC,SAQGA,EAAKhD,MAPDgD,EAAK/D,eCxCbiE,EAAiB,WAC5B,MAII/E,IAAMwE,WAAWzE,GAHnBJ,EADF,EACEA,aACAE,EAFF,EAEEA,UACAC,EAHF,EAGEA,aAEF,EAA0BE,IAAMI,SAAiB,IAAjD,mBAAOiB,EAAP,KAAc2D,EAAd,KACA,EAAkChF,IAAMI,UAAS,GAAjD,mBAAOmC,EAAP,KAAkBC,EAAlB,KACA,EAAwCxC,IAAMI,SAAsB,MAApE,mBAAOQ,EAAP,KAAqBU,EAArB,KAEM2D,EAAwBjF,IAAMM,SAAQ,kBACzCiC,GACE5C,IACCE,IACAwB,EAAM+C,SACT,CAAC7B,EAAWlB,EAAM+C,OAAQzE,EAAcE,IAkB3C,OACE,sBAAMmB,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CAAcuD,eAvBL,SAACM,GPnBE,IAACK,EOoBzB1C,GAAa,GACbwC,EAAS,IACT1D,EAAgB,MAChBxB,GAAa,IPvBYoF,EOyBZL,EAAK/D,GPxBbvB,EAAA,wBAA4B2F,KOyB9B/F,KAAK6F,GACLxE,OAAM,WACLV,GAAa,MAEduD,SAAQ,WACPb,GAAa,WAcP,sBAAKxB,UAAU,QAAQ,UAAQ,cAA/B,WACIrB,GACA,mBAAG,UAAQ,iBAAX,8BAKD4C,GAAa,cAAC,EAAD,IAEb1C,GACC,qBACEmB,UAAU,yBACV,UAAQ,oBAFV,mCAQDiE,GACC,qBACEjE,UAAU,0BACV,UAAQ,aAFV,4BAQCK,EAAM+C,QACP,cAAC,EAAD,CACE/C,MAAOA,EACPT,aAAcA,EACdU,gBAAiBA,YAO3B,qBACE,UAAQ,UACRN,UAAWmE,IACT,OACA,YACA,eACA,UACA,CAAE,gBAAiBvE,IAPvB,SAUE,qBAAKI,UAAU,gCAAf,SACGJ,GAAgB,cAAC,EAAD,CAAaD,KAAMC,gBC/FrCwE,EAAgB,WAC3B,OACE,cAAC,EAAD,UACE,cAAC,EAAD,OCPNC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b859ed12.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: <T>(url: string) => request<T>(url, 'DELETE'),\n};\n","import React, { useMemo, useEffect } from 'react';\nimport { User } from '../types/User';\nimport { getUsers } from '../api/PostsApi';\n\ntype PostsContextType = {\n  users: User[];\n  setUsers: React.Dispatch<React.SetStateAction<User[]>>;\n  selectedUser: User | null;\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>;\n  userError: boolean;\n  setUserError: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nconst defaultValue: PostsContextType = {\n  users: [],\n  setUsers: () => {},\n  selectedUser: null,\n  setSelectedUser: () => {},\n  userError: false,\n  setUserError: () => {},\n};\n\nexport const PostsContext = React.createContext<PostsContextType>(defaultValue);\n\nexport const PostsProvider: React.FC = ({ children }) => {\n  const [users, setUsers] = React.useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = React.useState<User | null>(null);\n  const [userError, setUserError] = React.useState(false);\n\n  const value = useMemo(() => ({\n    users,\n    setUsers,\n    selectedUser,\n    setSelectedUser,\n    userError,\n    setUserError,\n  }), [users, selectedUser, userError]);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => {\n        setUserError(true);\n      });\n  }, []);\n\n  return (\n    <PostsContext.Provider value={value}>\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = (): Promise<User[]> => {\n  return client.get('/users');\n};\n\nexport const getUserPosts = (userId: number): Promise<Post[]> => {\n  return client.get(`/posts?userId=${userId}`);\n};\n\nexport const getPostComments = (postId: number): Promise<Comment[]> => {\n  return client.get(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number): Promise<void> => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const createComment = (\n  comment: Omit<Comment, 'id'>,\n): Promise<Comment> => {\n  return client.post('/comments', comment);\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  post: Post;\n  selectedPost: Post | null;\n  postButtonClickHandler: (post: Post) => void;\n};\n\nexport const PostItem: React.FC<Props> = ({\n  post,\n  selectedPost,\n  postButtonClickHandler,\n}) => {\n  return (\n    <tr key={post.id} data-cy=\"Post\">\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={cn('button', 'is-link', {\n            'is-light': selectedPost?.id !== post.id,\n          })}\n          onClick={() => postButtonClickHandler(post)}\n        >\n          {selectedPost?.id !== post.id ? 'Open' : 'Close'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React, { useCallback } from 'react';\nimport { Post } from '../types/Post';\nimport { PostItem } from './PostItem';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const handleOpenPostDetails = useCallback((post: Post) => {\n    setSelectedPost((prevSelectedPost) => {\n      if (prevSelectedPost?.id === post.id) {\n        return null;\n      }\n\n      return post;\n    });\n  }, [setSelectedPost]);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <PostItem\n              key={post.id}\n              post={post}\n              selectedPost={selectedPost}\n              postButtonClickHandler={handleOpenPostDetails}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useCallback } from 'react';\nimport cn from 'classnames';\nimport { createComment } from '../api/PostsApi';\nimport { Comment, CommentData } from '../types/Comment';\n\ntype Props = {\n  postId: number;\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n  setError: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nconst emptyInputs: CommentData = {\n  name: '',\n  email: '',\n  body: '',\n};\n\nconst emptyErrors = {\n  name: false,\n  email: false,\n  body: false,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  setComments,\n  setError,\n}) => {\n  const [data, setData] = React.useState<CommentData>(emptyInputs);\n  const [errors, setErrors] = React.useState(emptyErrors);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const resetForm = useCallback(() => {\n    setError(false);\n\n    setData(emptyInputs);\n    setErrors(emptyErrors);\n  }, [setError]);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setError(false);\n\n    if (!data.name || !data.email || !data.body) {\n      setErrors({\n        name: !data.name,\n        email: !data.email,\n        body: !data.body,\n      });\n\n      return;\n    }\n\n    setIsLoading(true);\n    createComment({ ...data, postId })\n      .then((comment) => {\n        setComments((prevComments) => [...prevComments, comment]);\n        setData(prevData => ({ ...prevData, body: '' }));\n      })\n      .catch(() => setError(true))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const onInputFocused = useCallback((field: keyof CommentData) => {\n    setErrors((prevErrors) => (\n      { ...prevErrors, [field]: false }\n    ));\n  }, []);\n\n  const onInputChanged = useCallback((\n    field: keyof CommentData,\n    value: string,\n  ) => {\n    setData((prevData) => (\n      { ...prevData, [field]: value.trimStart() }\n    ));\n  }, []);\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            value={data.name}\n            onChange={(event) => onInputChanged('name', event.target.value)}\n            onFocus={() => onInputFocused('name')}\n            className={cn('input', { 'is-danger': errors.name })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            value={data.email}\n            className={cn('input', { 'is-danger': errors.email })}\n            onChange={(event) => onInputChanged('email', event.target.value)}\n            onFocus={() => onInputFocused('email')}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            value={data.body}\n            className={cn('input', 'comm-area', { 'is-danger': errors.body })}\n            onChange={(event) => onInputChanged('body', event.target.value)}\n            onFocus={() => onInputFocused('body')}\n          />\n        </div>\n\n        {errors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button',\n              'is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={resetForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { deleteComment, getPostComments } from '../api/PostsApi';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [error, setError] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [comments, setComments] = React.useState<Comment[]>([]);\n  const [isCommentFormOpen, setIsCommentFormOpen] = React.useState(false);\n\n  const handleDeleteComment = (comment: Comment) => {\n    const commentsCopy = [...comments];\n\n    setComments((prevComments) => (\n      prevComments.filter(({ id }) => id !== comment.id)\n    ));\n\n    deleteComment(comment.id)\n      .catch(() => {\n        setComments(commentsCopy);\n        setError(true);\n      });\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    setError(false);\n\n    getPostComments(post.id)\n      .then(setComments)\n      .catch(() => {\n        setError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n\n    return () => {\n      setComments([]);\n      setIsCommentFormOpen(false);\n    };\n  }, [post.id]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {error && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(!error && !isLoading && !comments.length) && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!!comments.length && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(comment)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {(!isLoading && !isCommentFormOpen) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsCommentFormOpen(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isCommentFormOpen && (\n          <NewCommentForm\n            postId={post.id}\n            setError={setError}\n            setComments={setComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { PostsContext } from '../context/PostsContext';\nimport { User } from '../types/User';\n\ntype Props = {\n  onUserSelected: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({ onUserSelected }) => {\n  const {\n    users,\n    selectedUser,\n    setSelectedUser,\n  } = React.useContext(PostsContext);\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const handleUserSelect = (user: User) => {\n    setSelectedUser(user);\n    setIsOpen(false);\n    onUserSelected(user);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsOpen(openStatus => !openStatus)}\n        >\n\n          <span>{selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map((user) => (\n              // eslint-disable-next-line jsx-a11y/anchor-is-valid\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={cn('dropdown-item', {\n                  'is-active': selectedUser?.id === user.id,\n                })}\n                onClick={() => handleUserSelect(user)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { PostsList } from './PostsList';\nimport { PostDetails } from './PostDetails';\nimport { UserSelector } from './UserSelector';\nimport { Loader } from './Loader';\nimport { PostsContext } from '../context/PostsContext';\nimport { User } from '../types/User';\nimport { getUserPosts } from '../api/PostsApi';\nimport { Post } from '../types/Post';\n\nexport const Main: React.FC = () => {\n  const {\n    selectedUser,\n    userError,\n    setUserError,\n  } = React.useContext(PostsContext);\n  const [posts, setPosts] = React.useState<Post[]>([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [selectedPost, setSelectedPost] = React.useState<Post | null>(null);\n\n  const noPostsMessageVisible = React.useMemo(() => (\n    !isLoading\n    && selectedUser\n    && !userError\n    && !posts.length\n  ), [isLoading, posts.length, selectedUser, userError]);\n\n  const onUserSelected = (user: User) => {\n    setIsLoading(true);\n    setPosts([]);\n    setSelectedPost(null);\n    setUserError(false);\n\n    getUserPosts(user.id)\n      .then(setPosts)\n      .catch(() => {\n        setUserError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector onUserSelected={onUserSelected} />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {userError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {noPostsMessageVisible && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {!!posts.length && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails post={selectedPost} />}\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import React from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { PostsProvider } from './context/PostsContext';\nimport { Main } from './components/Main';\n\nexport const App: React.FC = () => {\n  return (\n    <PostsProvider>\n      <Main />\n    </PostsProvider>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}